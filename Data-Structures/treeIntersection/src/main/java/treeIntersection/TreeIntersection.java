/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package treeIntersection;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashSet;

public class TreeIntersection {
    public ArrayList<Integer> findIntersectionsTwoTrees(Node T1, Node T2) {
        ArrayList<Integer> intersections = new ArrayList<>();
        if (T1 == null & T2 == null) {
            throw new NullPointerException("Trees are empty");
        } else if ((T1 == null && T2 != null) || (T1 != null && T2 == null)) {
            throw new NullPointerException("A tree was empty");
        } else {
            HashSet<Integer> possibleIntersections = new HashSet<>();
            possibleIntersections = makeHashSet(T1, possibleIntersections);
            return checkIntersection(T2, intersections, possibleIntersections);
        }
    }

    public HashSet<Integer> makeHashSet(Node root, HashSet<Integer> possibleIntersections) {
        if (root != null) {
            possibleIntersections.add(root.value);
            possibleIntersections = makeHashSet(root.left, possibleIntersections);
            possibleIntersections = makeHashSet(root.right, possibleIntersections);
        }
        return possibleIntersections;
    }

    public ArrayList<Integer> checkIntersection(Node root, ArrayList<Integer> intersections, HashSet<Integer> possibleIntersections) {
        if (root != null) {
            if (possibleIntersections.contains(root.value)) {
                intersections.add(root.value);
            }
            checkIntersection(root.left, intersections, possibleIntersections);
            checkIntersection(root.right, intersections, possibleIntersections);
        }
        return intersections;
    }

}
