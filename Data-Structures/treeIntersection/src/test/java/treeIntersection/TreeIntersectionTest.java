/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package treeIntersection;

import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;

import static org.junit.Assert.*;

public class TreeIntersectionTest {
    @Test
    public void testInstantiate() {
        TreeIntersection treeIntersection = new TreeIntersection();
    }

    TreeIntersection treeIntersection;
    Node T1;
    Node T2;
    Node empty;

    @Before
    public void setUp() {
        treeIntersection = new TreeIntersection();
        T1 = new Node(150, new Node(100, new Node(75), new Node(160, new Node(125), new Node(175))),
                new Node(250, new Node(200), new Node(350, new Node(300), new Node(500))));
        T2 = new Node(42, new Node(100, new Node(15), new Node(160, new Node(125), new Node(175))),
                new Node(600, new Node(200), new Node(350, new Node(4), new Node(500))));
    }

    // empty trees and one empty
    @Test (expected = NullPointerException.class)
    public void testNullTrees() {
        assertEquals("Trees are empty", treeIntersection.findIntersectionsTwoTrees(empty, empty));
    }
    @Test (expected = NullPointerException.class)
    public void testOneEmptyTree() {
        assertEquals("A tree was empty", treeIntersection.findIntersectionsTwoTrees(T1, empty));
    }

    // test with regular trees
    @Test
    public void testHappy() {
        ArrayList<Integer> expected = new ArrayList<>();
        expected.add(100);
        expected.add(160);
        expected.add(125);
        expected.add(175);
        expected.add(200);
        expected.add(350);
        expected.add(500);
        assertEquals(expected, treeIntersection.findIntersectionsTwoTrees(T1, T2));
    }

    // test with repetition in a tree
    @Test
    public void testRepeatedValues() {
        T1 = new Node(150, new Node(150, new Node(150), new Node(150, new Node(150), new Node(150))),
                new Node(250, new Node(200), new Node(350, new Node(300), new Node(500))));
        T2 = new Node(150, new Node(100, new Node(75), new Node(160, new Node(125), new Node(175))),
                new Node(250, new Node(200), new Node(350, new Node(300), new Node(500))));
        ArrayList<Integer> expected = new ArrayList<>();
        expected.add(150);
        expected.add(250);
        expected.add(200);
        expected.add(350);
        expected.add(300);
        expected.add(500);
        assertEquals(expected, treeIntersection.findIntersectionsTwoTrees(T1, T2));
    }
}
